<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>善良的乌贼</title>
  
  <subtitle>请不要假装很努力,因为结果不会陪你演戏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyinkai.github.io/"/>
  <updated>2018-03-26T13:30:48.608Z</updated>
  <id>http://chenyinkai.github.io/</id>
  
  <author>
    <name>Yinkai Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈 javaScript 的模块化</title>
    <link href="http://chenyinkai.github.io/2018/03/26/javascript/module/"/>
    <id>http://chenyinkai.github.io/2018/03/26/javascript/module/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-03-26T13:30:48.608Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;什么是模块化?&lt;/p&gt;
&lt;p&gt;随着代码复杂程度的提高, 项目也变得越来越难维护, &lt;code&gt;JavaScript模块化&lt;/code&gt; 也因此油然而生, 本文主要介绍 &lt;code&gt;JavaScript模块化&lt;/code&gt; 的一些发展历程。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>http状态码 200(From Cache)和 304(Not Modified)的区别</title>
    <link href="http://chenyinkai.github.io/2018/03/21/web/200-304/"/>
    <id>http://chenyinkai.github.io/2018/03/21/web/200-304/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2018-03-22T04:59:03.499Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文将会简单介绍下http状态码 200(From Cache)和 304(Not Modified)的区别。&lt;br&gt;
    
    </summary>
    
      <category term="http" scheme="http://chenyinkai.github.io/categories/http/"/>
    
    
      <category term="http" scheme="http://chenyinkai.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>更优雅的处理异步方式--async await</title>
    <link href="http://chenyinkai.github.io/2018/03/21/javascript/async-await/"/>
    <id>http://chenyinkai.github.io/2018/03/21/javascript/async-await/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2018-03-21T12:46:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 &lt;code&gt;async&lt;/code&gt; &lt;code&gt;await&lt;/code&gt;, ES7 新加的一种更为优雅的处理异步的方式。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://chenyinkai.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vue-router 的两种模式</title>
    <link href="http://chenyinkai.github.io/2018/03/20/vue/vue-router-mode/"/>
    <id>http://chenyinkai.github.io/2018/03/20/vue/vue-router-mode/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-03-20T05:36:30.352Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 &lt;code&gt;vue-router&lt;/code&gt; 的两种路由模式: &lt;code&gt;hash&lt;/code&gt; 模式和 &lt;code&gt;history&lt;/code&gt; 模式&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://chenyinkai.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://chenyinkai.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 搭建的项目处理不同环境下请求不同域名的问题</title>
    <link href="http://chenyinkai.github.io/2018/03/15/vue/vue-axios/"/>
    <id>http://chenyinkai.github.io/2018/03/15/vue/vue-axios/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-03-15T05:26:26.288Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;vue-cli&lt;/code&gt; 开发项目过程中, 根据开发环境和正式环境不同, 我们往往需要请求不同域名下的后台接口, 这时候, 该怎么去设置, 达到同一种写法可以根据环境不同而自动切换请求域名呢? 本文将会介绍两种配置方式.&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://chenyinkai.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://chenyinkai.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>XSS 和 CSRF</title>
    <link href="http://chenyinkai.github.io/2018/02/28/web/XSS-CSRF/"/>
    <id>http://chenyinkai.github.io/2018/02/28/web/XSS-CSRF/</id>
    <published>2018-02-27T16:00:00.000Z</published>
    <updated>2018-02-28T02:30:58.361Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录对于 &lt;code&gt;XSS&lt;/code&gt; 和 &lt;code&gt;CSRF&lt;/code&gt; 的基本概念和防御措施.&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://chenyinkai.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://chenyinkai.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>push到github远程仓库时，每次都要输入用户名和密码的问题</title>
    <link href="http://chenyinkai.github.io/2018/02/26/questions/git-push/"/>
    <id>http://chenyinkai.github.io/2018/02/26/questions/git-push/</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-02-26T01:24:28.064Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;过完年回来，发现&lt;code&gt;push&lt;/code&gt; 到 &lt;code&gt;github&lt;/code&gt;远程仓库时，每次都需要输入用户名和密码，这也太麻烦了，于是查了下解决方法。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://chenyinkai.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://chenyinkai.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>复制文本加上版权信息功能实现</title>
    <link href="http://chenyinkai.github.io/2018/02/25/javascript/copy/"/>
    <id>http://chenyinkai.github.io/2018/02/25/javascript/copy/</id>
    <published>2018-02-24T16:00:00.000Z</published>
    <updated>2018-02-25T01:33:13.982Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有些网站为了维护版权信息, 用户在复制完成后, 发现粘帖出来的内容往往都还有一些作者名字之类的版权信息, 那么这样的功能是怎么实现的呢? 其实原理也是非常的简单，就是监听一下剪切板事件.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的Promise</title>
    <link href="http://chenyinkai.github.io/2018/02/02/promise/MyPromise/"/>
    <id>http://chenyinkai.github.io/2018/02/02/promise/MyPromise/</id>
    <published>2018-02-02T02:16:45.000Z</published>
    <updated>2018-02-10T03:03:56.567Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;实现一个只有 &lt;code&gt;then&lt;/code&gt; 方法的 &lt;code&gt;Promise&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
      <category term="Promise" scheme="http://chenyinkai.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>使用Promise</title>
    <link href="http://chenyinkai.github.io/2018/02/01/promise/promise/"/>
    <id>http://chenyinkai.github.io/2018/02/01/promise/promise/</id>
    <published>2018-02-01T06:12:00.000Z</published>
    <updated>2018-02-11T09:43:41.173Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在做移动端活动h5时，往往由于图片资源过多，导致页面加载十分缓慢，此时，我们就想，如果可以先将图片预加载完成，并且可以加载进度，图片预加载完成后再跳转活动页，这样用户体验将会好很多。基于这样的需求，就实现了一个图片预加载并可以知道图片加载进度的插件(&lt;a href=&quot;https://github.com/chenyinkai/resloader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件已完成，点这里查看&lt;/a&gt;)，主要使用 &lt;code&gt;Promise.all&lt;/code&gt; 方法解决，本文介绍 &lt;code&gt;Promise&lt;/code&gt; 的基本属性和方法&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
      <category term="Promise" scheme="http://chenyinkai.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖</title>
    <link href="http://chenyinkai.github.io/2018/01/22/javascript/debounce/"/>
    <id>http://chenyinkai.github.io/2018/01/22/javascript/debounce/</id>
    <published>2018-01-22T11:59:14.000Z</published>
    <updated>2018-02-10T03:14:00.449Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;函数防抖(debounce)是为了限制函数的执行频次，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://chenyinkai.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://chenyinkai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue非父子组件通信</title>
    <link href="http://chenyinkai.github.io/2018/01/13/vue/vue-eventbus/"/>
    <id>http://chenyinkai.github.io/2018/01/13/vue/vue-eventbus/</id>
    <published>2018-01-12T16:00:00.000Z</published>
    <updated>2018-03-22T05:02:47.366Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前我们已经对父子组件之间的通信有了一定的理解 #22 ,那么对于非父子组件之间的通信该如何实现呢？&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://chenyinkai.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://chenyinkai.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue父子组件通信</title>
    <link href="http://chenyinkai.github.io/2018/01/12/vue/vue-props-emit/"/>
    <id>http://chenyinkai.github.io/2018/01/12/vue/vue-props-emit/</id>
    <published>2018-01-12T11:59:14.000Z</published>
    <updated>2018-03-22T05:01:01.916Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中有使用到 &lt;code&gt;vue&lt;/code&gt; ,记录一下 &lt;code&gt;vue&lt;/code&gt; 父子组件之间的数据传递&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://chenyinkai.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://chenyinkai.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>东野圭吾作品读后感</title>
    <link href="http://chenyinkai.github.io/2018/01/04/books/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"/>
    <id>http://chenyinkai.github.io/2018/01/04/books/东野圭吾/</id>
    <published>2018-01-04T10:16:45.000Z</published>
    <updated>2018-02-10T02:18:24.424Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;闲来无事，于是便看起了之前一直想看但没时间看的东野圭吾的小说，稍微记下一些感触吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="非技术类书籍" scheme="http://chenyinkai.github.io/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="非技术类书籍" scheme="http://chenyinkai.github.io/tags/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>移动端H5页面开发过程中遇到的问题</title>
    <link href="http://chenyinkai.github.io/2017/09/25/H5/quesInHtml5/"/>
    <id>http://chenyinkai.github.io/2017/09/25/H5/quesInHtml5/</id>
    <published>2017-09-25T02:52:44.000Z</published>
    <updated>2018-02-10T02:42:09.572Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要介绍在开发移动端页面过程中，所遇到的一些问题以及解决方法。&lt;br&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://chenyinkai.github.io/categories/HTML5/"/>
    
    
      <category term="移动端" scheme="http://chenyinkai.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://chenyinkai.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>webpack-proxyTable解决开发环境下跨域问题</title>
    <link href="http://chenyinkai.github.io/2017/08/28/vue/webpack-proxyTable/"/>
    <id>http://chenyinkai.github.io/2017/08/28/vue/webpack-proxyTable/</id>
    <published>2017-08-28T10:24:33.000Z</published>
    <updated>2018-02-10T03:16:36.625Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://vuejs-templates.github.io/webpack/proxy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue开发期间的API代理&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://chenyinkai.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://chenyinkai.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue项目中使用swiper遇到的一些坑</title>
    <link href="http://chenyinkai.github.io/2017/08/22/vue/swiperInVue/"/>
    <id>http://chenyinkai.github.io/2017/08/22/vue/swiperInVue/</id>
    <published>2017-08-22T11:59:14.000Z</published>
    <updated>2018-02-10T03:21:44.473Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在vue项目中需要实现一个轮播的效果，于是便想到了使用swiper，以下是使用过程中遇到的两个问题。&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://chenyinkai.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://chenyinkai.github.io/tags/vue/"/>
    
      <category term="swiper" scheme="http://chenyinkai.github.io/tags/swiper/"/>
    
  </entry>
  
  <entry>
    <title>flex弹性盒布局</title>
    <link href="http://chenyinkai.github.io/2017/08/16/css/flex/"/>
    <id>http://chenyinkai.github.io/2017/08/16/css/flex/</id>
    <published>2017-08-16T07:05:58.000Z</published>
    <updated>2018-02-10T02:19:54.626Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;点击&lt;a href=&quot;http://caniuse.com/#search=flex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，你可以查看浏览器对于 flex 的支持程度。&lt;br&gt;本文主要介绍和 &lt;code&gt;flex&lt;/code&gt; 相关的属性。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://chenyinkai.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://chenyinkai.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序富文本解析插件--wxParse</title>
    <link href="http://chenyinkai.github.io/2017/08/15/wechat/wxParse/"/>
    <id>http://chenyinkai.github.io/2017/08/15/wechat/wxParse/</id>
    <published>2017-08-15T08:49:25.000Z</published>
    <updated>2018-02-10T03:22:11.033Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在写小程序的时候，碰到数据中带有html标签，&lt;br&gt;&lt;img src=&quot;/images/wxParse.png&quot; alt=&quot;&quot;&gt;，小程序中又没有类似于 v-html 指令可以解析html文本，这时候，wxParse的作用就体现出来了。&lt;br&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://chenyinkai.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://chenyinkai.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="wxParse" scheme="http://chenyinkai.github.io/tags/wxParse/"/>
    
  </entry>
  
  <entry>
    <title>移动端如何实现1px的细线</title>
    <link href="http://chenyinkai.github.io/2017/08/14/H5/lineinphone/"/>
    <id>http://chenyinkai.github.io/2017/08/14/H5/lineinphone/</id>
    <published>2017-08-14T02:16:45.000Z</published>
    <updated>2018-02-10T02:29:51.129Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在做移动端项目的时候，我们往往需要设置1px的边框，但是 &lt;code&gt;border-width:1px;&lt;/code&gt; 效果出来的边框却往往比1px要粗。本文主要介绍移动端实现1px边框的几种实现方案。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://chenyinkai.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://chenyinkai.github.io/tags/css/"/>
    
      <category term="移动端" scheme="http://chenyinkai.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
</feed>
